// Generated by CoffeeScript 1.6.3
(function() {
  var Entity, root, _ref,
    __slice = [].slice;

  root = typeof window !== "undefined" && window !== null ? window : exports;

  root.engine = (_ref = root.engine) != null ? _ref : {};

  Entity = (function() {
    function Entity(engine) {
      this.engine = engine;
      this.x = 0;
      this.y = 0;
    }

    Entity.prototype.setXY = function(x, y) {
      this.x = x;
      this.y = y;
    };

    Entity.prototype.addFrame = function(id, sprite) {
      this.frames[id] = sprite;
    };

    Entity.prototype.addScript = function(id, script) {
      this.scripts[id] = script;
    };

    Entity.prototype.move = function(dir) {
      switch (dir) {
        case 'up':
          this.y++;
          break;
        case 'down':
          this.y--;
          break;
        case 'left':
          this.x--;
          break;
        case 'left':
          this.x++;
      }
      if (dir === !'undefined') {
        return this.animate(dir, 0);
      }
    };

    Entity.prototype.currentXY = function() {
      return {
        x: this.x,
        y: this.y
      };
    };

    Entity.prototype.animate = function(id, step) {
      var offsetX, offsetY;
      this.moving = this.animations[id][step].moving;
      offsetX = this.animations[id][step].offsetX;
      offsetY = this.animations[id][step].offsetY;
      this.setCurrentFrame(this.animations[id][step].frame);
      return this.engine.nextStep(this.animate(id, step++));
    };

    Entity.prototype.draw = function() {
      var offsetX, offsetY, x, y;
      x = this.x;
      y = this.y;
      offsetX = this.offsetX;
      offsetY = this.offsetY;
      return this.engine.viewport.draw(x, y, this.getCurrentFrame(), offsetX, offsetY);
    };

    Entity.prototype.setCurrentFrame = function(id) {
      return this.currentFrame = id;
    };

    Entity.prototype.getCurrentFrame = function() {
      return this.currentFrame;
    };

    Entity.prototype.execScript = function() {
      var id, params, _ref1;
      id = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref1 = this.scripts)[id].apply(_ref1, [this].concat(__slice.call(params)));
    };

    Entity.prototype.buildFromJSON = function(object) {
      var data, frame, frames, script, scripts;
      scripts = object.scripts;
      frames = object.frames;
      for (script in scripts) {
        data = scripts[script];
        this.addScript(script, data);
      }
      for (frame in frames) {
        data = frames[frame];
        this.addFrame(frame, data);
      }
      this.setXY(object.x, object.y);
      if (object.initFrame) {
        return this.setCurrentFrame(object.initFrame);
      }
    };

    return Entity;

  })();

  root.engine.Entity = Entity;

}).call(this);
